{"ast":null,"code":"var _jsxFileName = \"/Users/samanthaalanastratton/Desktop/Springboard/ReactGithub/cards/reactCards/src/Deck.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect, useRef } from \"react\";\n// import axios from 'axios';\n// import Card from \"./Card\";\n\n// const Deck = () =>{\n//   // initial value of null will be replace on render due to useEffect\n//   const [deck, setDeck] = useState(null);\n//   const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png')\n//    // set deck to a new deck \n//    useEffect(()=>{\n//     axios\n//     .get('https://deckofcardsapi.com/api/deck/new/draw/?count=1')\n//     .then(res=>{\n//       setDeck(`https://deckofcardsapi.com/api/deck/${ res.data.deck_id}/draw/?count=1`)\n//     })\n//   }, [])\n//   // // draw from deck until cards are gone, then show back of deck\n//   useEffect(()=>{\n//     async function draw(deck){\n//       axios.get(deck).then(data=>{\n//         setCurrentCardImg(data.data.cards[0].image)\n//       })\n//     }\n//     draw(deck)\n//   },[deck, currentCardImg])\n\n//   const handleClick = ()=>{\n\n//   }\n\n//   return(\n//     <>\n//       <img src={currentCardImg}/>\n//       <br></br>\n//       <button onClick={handleClick}> Draw</button>\n//     </>\n//   )\n// }\n\n// export default Deck;\n\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Deck = () => {\n  _s();\n  const [deckId, setDeckId] = useState(null);\n  const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png');\n  useEffect(() => {\n    axios.get('https://deckofcardsapi.com/api/deck/new/draw/?count=1').then(res => {\n      setDeckId(res.data.deck_id);\n    });\n  }, []);\n  useEffect(() => {\n    async function draw() {\n      if (deckId) {\n        const response = await axios.get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`);\n        setCurrentCardImg(response.data.cards[0].image);\n      }\n    }\n    draw();\n  }, [deckId]);\n  const handleClick = () => {\n    // Do something when the button is clicked\n    // For example, trigger another draw or perform an action\n    draw();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: currentCardImg,\n      alt: \"current card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Draw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Deck, \"wztu35G23tR+IX+GibAJ2yY3VtM=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Deck","_s","deckId","setDeckId","currentCardImg","setCurrentCardImg","get","then","res","data","deck_id","draw","response","cards","image","handleClick","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/samanthaalanastratton/Desktop/Springboard/ReactGithub/cards/reactCards/src/Deck.js"],"sourcesContent":["// import { useState, useEffect, useRef } from \"react\";\n// import axios from 'axios';\n// import Card from \"./Card\";\n\n// const Deck = () =>{\n//   // initial value of null will be replace on render due to useEffect\n//   const [deck, setDeck] = useState(null);\n//   const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png')\n//    // set deck to a new deck \n//    useEffect(()=>{\n//     axios\n//     .get('https://deckofcardsapi.com/api/deck/new/draw/?count=1')\n//     .then(res=>{\n//       setDeck(`https://deckofcardsapi.com/api/deck/${ res.data.deck_id}/draw/?count=1`)\n//     })\n//   }, [])\n//   // // draw from deck until cards are gone, then show back of deck\n//   useEffect(()=>{\n//     async function draw(deck){\n//       axios.get(deck).then(data=>{\n//         setCurrentCardImg(data.data.cards[0].image)\n//       })\n//     }\n//     draw(deck)\n//   },[deck, currentCardImg])\n\n//   const handleClick = ()=>{\n\n//   }\n\n//   return(\n//     <>\n//       <img src={currentCardImg}/>\n//       <br></br>\n//       <button onClick={handleClick}> Draw</button>\n//     </>\n//   )\n// }\n\n// export default Deck;\n\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nconst Deck = () => {\n  const [deckId, setDeckId] = useState(null);\n  const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png');\n\n  useEffect(() => {\n    axios.get('https://deckofcardsapi.com/api/deck/new/draw/?count=1')\n      .then(res => {\n        setDeckId(res.data.deck_id);\n      });\n  }, []);\n\n  useEffect(() => {\n    async function draw() {\n      if (deckId) {\n        const response = await axios.get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`);\n        setCurrentCardImg(response.data.cards[0].image);\n      }\n    }\n\n    draw();\n  }, [deckId]);\n\n  const handleClick = () => {\n    // Do something when the button is clicked\n    // For example, trigger another draw or perform an action\n    draw();\n  };\n\n  return (\n    <>\n      <img src={currentCardImg} alt=\"current card\"/>\n      <br></br>\n      <button onClick={handleClick}>Draw</button>\n    </>\n  );\n}\n\nexport default Deck;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,gDAAgD,CAAC;EAEtGC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACW,GAAG,CAAC,uDAAuD,CAAC,CAC/DC,IAAI,CAACC,GAAG,IAAI;MACXL,SAAS,CAACK,GAAG,CAACC,IAAI,CAACC,OAAO,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACd,eAAeiB,IAAIA,CAAA,EAAG;MACpB,IAAIT,MAAM,EAAE;QACV,MAAMU,QAAQ,GAAG,MAAMjB,KAAK,CAACW,GAAG,CAAE,uCAAsCJ,MAAO,gBAAe,CAAC;QAC/FG,iBAAiB,CAACO,QAAQ,CAACH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC;MACjD;IACF;IAEAH,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;EAEZ,MAAMa,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;IACAJ,IAAI,CAAC,CAAC;EACR,CAAC;EAED,oBACEd,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA;MAAKoB,GAAG,EAAEb,cAAe;MAACc,GAAG,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC9CzB,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTzB,OAAA;MAAQ0B,OAAO,EAAER,WAAY;MAAAC,QAAA,EAAC;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC3C,CAAC;AAEP,CAAC;AAAArB,EAAA,CAnCKD,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAqCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}