{"ast":null,"code":"var _jsxFileName = \"/Users/samanthaalanastratton/Desktop/Springboard/ReactGithub/cards/reactCards/src/Deck.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Deck = () => {\n  _s();\n  // initial value of null will be replace on render due to useEffect\n  const [deckId, setDeckId] = useState(null);\n  // initialize deck with back of card image \n  const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png');\n\n  // async function to draw a card from same deck\n  const draw = async () => {\n    try {\n      // if there is a deck id then draw from said deck\n      if (deckId) {\n        const response = await axios.get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`);\n        setCurrentCardImg(response.data.cards[0].image);\n      }\n    } catch {\n      // once all cards have been drawn alert\n      alert('Error: no cards remaining!');\n    }\n  };\n  useEffect(() => {\n    // replace initial deckId value of null with a new deck \n    axios.get('https://deckofcardsapi.com/api/deck/new/draw/?count=1').then(res => {\n      setDeckId(res.data.deck_id);\n    });\n  }, []);\n  useEffect(() => {\n    // draw() inside of useEffect and specefy that it should \n    draw();\n  }, [deckId]);\n  const handleClick = () => {\n    // \n    draw();\n  };\n  console.log(deckId);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      src: currentCardImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Draw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Deck, \"wztu35G23tR+IX+GibAJ2yY3VtM=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["useState","useEffect","axios","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Deck","_s","deckId","setDeckId","currentCardImg","setCurrentCardImg","draw","response","get","data","cards","image","alert","then","res","deck_id","handleClick","console","log","children","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/samanthaalanastratton/Desktop/Springboard/ReactGithub/cards/reactCards/src/Deck.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Card from \"./Card\";\n\nconst Deck = () => {\n  // initial value of null will be replace on render due to useEffect\n  const [deckId, setDeckId] = useState(null);\n  // initialize deck with back of card image \n  const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png');\n\n  // async function to draw a card from same deck\n  const draw = async () => {\n    try{\n    // if there is a deck id then draw from said deck\n      if (deckId) {\n        const response = await axios.get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`);\n        setCurrentCardImg(response.data.cards[0].image);\n      }\n    }catch{\n      // once all cards have been drawn alert\n      alert('Error: no cards remaining!')\n    }\n  };\n\n  useEffect(() => {\n    // replace initial deckId value of null with a new deck \n    axios.get('https://deckofcardsapi.com/api/deck/new/draw/?count=1')\n      .then(res => {\n        setDeckId(res.data.deck_id);\n      });\n  }, []);\n\n  useEffect(() => {\n    // draw() inside of useEffect and specefy that it should \n    draw();\n  }, [deckId]);\n\n  const handleClick = () => {\n    // \n    draw();\n  };\n  console.log(deckId)\n  return (\n    <>\n      <Card src={currentCardImg}/>\n      <br></br>\n      <button onClick={handleClick}>Draw</button>\n    </>\n  );\n}\n\nexport default Deck;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1C;EACA,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,gDAAgD,CAAC;;EAEtG;EACA,MAAMc,IAAI,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAG;MACH;MACE,IAAIJ,MAAM,EAAE;QACV,MAAMK,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,uCAAsCN,MAAO,gBAAe,CAAC;QAC/FG,iBAAiB,CAACE,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC;MACjD;IACF,CAAC,OAAK;MACJ;MACAC,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CAACc,GAAG,CAAC,uDAAuD,CAAC,CAC/DK,IAAI,CAACC,GAAG,IAAI;MACXX,SAAS,CAACW,GAAG,CAACL,IAAI,CAACM,OAAO,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACd;IACAa,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAV,IAAI,CAAC,CAAC;EACR,CAAC;EACDW,OAAO,CAACC,GAAG,CAAChB,MAAM,CAAC;EACnB,oBACEL,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACEtB,OAAA,CAACF,IAAI;MAACyB,GAAG,EAAEhB;IAAe;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC5B3B,OAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT3B,OAAA;MAAQ4B,OAAO,EAAET,WAAY;MAAAG,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC3C,CAAC;AAEP,CAAC;AAAAvB,EAAA,CA7CKD,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AA+CV,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}