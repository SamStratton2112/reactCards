{"ast":null,"code":"var _jsxFileName = \"/Users/samanthaalanastratton/Desktop/Springboard/ReactGithub/cards/reactCards/src/Deck.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport axios from 'axios';\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Deck = () => {\n  _s();\n  // initial value of null will be replace on render due to useEffect\n  const [deck, setDeck] = useState();\n  const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png');\n  // set deck to a new deck \n  useEffect(() => {\n    axios.get('https://deckofcardsapi.com/api/deck/new/').then(res => {\n      setDeck(`https://deckofcardsapi.com/api/deck/${res.data.deck_id}/draw/?count=1`);\n    });\n  }, []);\n  // draw from deck until cards are gone, then show back of deck\n  useEffect(() => {\n    axios.get(deck).then(res => {\n      setCurrentCardImg(res.data.cards[0].image);\n    }, []);\n  });\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: currentCardImg\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Deck, \"zbWW6we3/dw9wkU1O6N0l+mLauc=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","Card","jsxDEV","_jsxDEV","Deck","_s","deck","setDeck","currentCardImg","setCurrentCardImg","get","then","res","data","deck_id","cards","image","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samanthaalanastratton/Desktop/Springboard/ReactGithub/cards/reactCards/src/Deck.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport axios from 'axios';\nimport Card from \"./Card\";\n\nconst Deck = () =>{\n  // initial value of null will be replace on render due to useEffect\n  const [deck, setDeck] = useState();\n  const [currentCardImg, setCurrentCardImg] = useState('https://deckofcardsapi.com/static/img/back.png')\n  // set deck to a new deck \n  useEffect(()=>{\n    axios\n    .get('https://deckofcardsapi.com/api/deck/new/')\n    .then(res=>{\n      setDeck(`https://deckofcardsapi.com/api/deck/${ res.data.deck_id}/draw/?count=1`)\n    })\n\n  }, [])\n  // draw from deck until cards are gone, then show back of deck\n  useEffect(()=>{\n    axios.get(deck).then(res=>{\n      setCurrentCardImg(res.data.cards[0].image);\n    }, [])\n  })\n\n  return(\n    <img src={currentCardImg}/>\n  )\n}\n\nexport default Deck;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,gDAAgD,CAAC;EACtG;EACAC,SAAS,CAAC,MAAI;IACZE,KAAK,CACJU,GAAG,CAAC,0CAA0C,CAAC,CAC/CC,IAAI,CAACC,GAAG,IAAE;MACTL,OAAO,CAAE,uCAAuCK,GAAG,CAACC,IAAI,CAACC,OAAQ,gBAAe,CAAC;IACnF,CAAC,CAAC;EAEJ,CAAC,EAAE,EAAE,CAAC;EACN;EACAhB,SAAS,CAAC,MAAI;IACZE,KAAK,CAACU,GAAG,CAACJ,IAAI,CAAC,CAACK,IAAI,CAACC,GAAG,IAAE;MACxBH,iBAAiB,CAACG,GAAG,CAACC,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC;IAC5C,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,CAAC;EAEF,oBACEb,OAAA;IAAKc,GAAG,EAAET;EAAe;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAE/B,CAAC;AAAAhB,EAAA,CAvBKD,IAAI;AAAAkB,EAAA,GAAJlB,IAAI;AAyBV,eAAeA,IAAI;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}